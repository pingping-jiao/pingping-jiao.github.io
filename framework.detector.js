let tenant;let fr_mapping = {"7":"Fetch","x" :"XmlHttpRequest","V" :"ActiveX","o" :"Prototype","m":"MooTools","j" :"jQuery","I" :"ICEfaces","e" :"Extjs","d" :"Dojo","g" :"Angular","r":"React","v":"Vue 2"};let managed = /\/e\/[\d|\w]{8}-[\d|\w]{4}-[\d|\w]{4}-[\d|\w]{4}-[\d|\w]{12}\//.test(window.location.href); let app = {    "applications": {}};function checkURL() {    let host = window.location.host;    let foundTenant;    if(host.indexOf("live.dynatrace.com")  > -1 || host.indexOf(".dev.dynatracelabs.com") > -1 || host.indexOf("dynalabs.io") > -1){        foundTenant = host.split(".")[0];    }      if(/\/e\/[\d|\w]{8}-[\d|\w]{4}-[\d|\w]{4}-[\d|\w]{4}-[\d|\w]{12}\//.test(window.location.href)){        foundTenant = window.location.href.split("/")[4];    }    return foundTenant;}let getAsync = function (url) {    return new Promise((resolve, reject) => {        let request = new XMLHttpRequest();        request.open("GET", url, true);        request.onload = () => {            if (request.status >= 200 && request.status < 400) {                resolve(JSON.parse(request.response));            } else {                reject("Got an HTTP error during request: "+request.status);            }        };        request.onerror = (e) => {            reject("Got an error making request: " + e);        };        request.send(null);    });};tenant = checkURL();app["tenant"] = tenant;let beginningURL = "";app["fullURL"] = window.location.href;if (managed){    let managedSplit1 = window.location.href.split(/\/e\/[\d|\w]{8}-[\d|\w]{4}-[\d|\w]{4}-[\d|\w]{4}-[\d|\w]{12}\//);    let managedSplit2 = window.location.href.split(managedSplit1[1])[0];    beginningURL = managedSplit2.slice(0,-1);    app["managed"] = managed;} else {    if(window.location.host.indexOf("live.dynatrace.com")>-1) {        beginningURL = "https://" + tenant + ".live.dynatrace.com";    } else {        beginningURL = "https://" + tenant + ".dev.dynatracelabs.com";    }}app["beginningURL"] = beginningURL;let detected_apps = [];getAsync(beginningURL + "/rest/uemapplications?parts=health-od%2Chealth-ts%2Cmain&timeframe=last2h&gtf=l_2_HOURS")          .then((function (response) {                for (let i in response.uemApplications) {                if (response.uemApplications.hasOwnProperty(i)) {              let application = response.uemApplications[i];              name = " ";                          app[%27applications%27][application.name] = application.id;                           if(application.id.startsWith(%27APPLICATION%27)){                  let appURL = beginningURL + "/rest/uemhelper/detectedjsframeworks?appid="+application.id;                getAsync(appURL).then((function (response) {                              if(response.data){                                                                   if(response.data.length > 0){                                    detected_framework = "";                                    for (let n in response.data)                                          {                                            name = application.name;                                           if (response.data[n].enabled == false)                                              {                                              if(detected_framework)                                                {                                                detected_framework = fr_mapping[response.data[n].framework] + " " +detected_framework;                                            }                                                else {                                                 detected_framework =   fr_mapping[response.data[n].framework];                                                }                                           }                                           }                                  if(detected_framework.length>1)                                  {                                                              detected_apps.push({"name":application.name, "id":application.id,"detected_frameworks":detected_framework});                              }                                  }                              }                                                      }))                          .catch(function (e) {                              console.log("There was a problem: " + e);                          });              }            }            }            } ));     setTimeout(() => { console.table(detected_apps)}, 1000);